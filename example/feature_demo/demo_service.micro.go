// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: example/feature_demo/demo_service.proto

package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/partitio/protoc-gen-gorm/options"
import _ "google.golang.org/genproto/protobuf/field_mask"
import _ "github.com/partitio/atlas-app-toolkit/query"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = google_protobuf2.Empty{}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for IntPointService service

type IntPointService interface {
	// The convention requires the rpc names have Create/Read/Update/List/Delete
	// as a prefix. The type is inferred from the response (except for delete),
	// so multiple objects can have CURDL handlers in the same service, provided
	// they are given unique suffixes
	Create(ctx context.Context, in *CreateIntPointRequest, opts ...client.CallOption) (*CreateIntPointResponse, error)
	Read(ctx context.Context, in *ReadIntPointRequest, opts ...client.CallOption) (*ReadIntPointResponse, error)
	Update(ctx context.Context, in *UpdateIntPointRequest, opts ...client.CallOption) (*UpdateIntPointResponse, error)
	List(ctx context.Context, in *ListIntPointRequest, opts ...client.CallOption) (*ListIntPointResponse, error)
	ListSomething(ctx context.Context, in *google_protobuf2.Empty, opts ...client.CallOption) (*ListSomethingResponse, error)
	Delete(ctx context.Context, in *DeleteIntPointRequest, opts ...client.CallOption) (*DeleteIntPointResponse, error)
	// CustomMethod can't be autogenerated as it matches no conventions, it will
	// become a stub
	CustomMethod(ctx context.Context, in *google_protobuf2.Empty, opts ...client.CallOption) (*google_protobuf2.Empty, error)
	// CreateSomething also doesn't match conventions and will become a stub
	CreateSomething(ctx context.Context, in *Something, opts ...client.CallOption) (*Something, error)
}

type intPointService struct {
	c    client.Client
	name string
}

func NewIntPointService(name string, c client.Client) IntPointService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "example"
	}
	return &intPointService{
		c:    c,
		name: name,
	}
}

func (c *intPointService) Create(ctx context.Context, in *CreateIntPointRequest, opts ...client.CallOption) (*CreateIntPointResponse, error) {
	req := c.c.NewRequest(c.name, "IntPointService.Create", in)
	out := new(CreateIntPointResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointService) Read(ctx context.Context, in *ReadIntPointRequest, opts ...client.CallOption) (*ReadIntPointResponse, error) {
	req := c.c.NewRequest(c.name, "IntPointService.Read", in)
	out := new(ReadIntPointResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointService) Update(ctx context.Context, in *UpdateIntPointRequest, opts ...client.CallOption) (*UpdateIntPointResponse, error) {
	req := c.c.NewRequest(c.name, "IntPointService.Update", in)
	out := new(UpdateIntPointResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointService) List(ctx context.Context, in *ListIntPointRequest, opts ...client.CallOption) (*ListIntPointResponse, error) {
	req := c.c.NewRequest(c.name, "IntPointService.List", in)
	out := new(ListIntPointResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointService) ListSomething(ctx context.Context, in *google_protobuf2.Empty, opts ...client.CallOption) (*ListSomethingResponse, error) {
	req := c.c.NewRequest(c.name, "IntPointService.ListSomething", in)
	out := new(ListSomethingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointService) Delete(ctx context.Context, in *DeleteIntPointRequest, opts ...client.CallOption) (*DeleteIntPointResponse, error) {
	req := c.c.NewRequest(c.name, "IntPointService.Delete", in)
	out := new(DeleteIntPointResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointService) CustomMethod(ctx context.Context, in *google_protobuf2.Empty, opts ...client.CallOption) (*google_protobuf2.Empty, error) {
	req := c.c.NewRequest(c.name, "IntPointService.CustomMethod", in)
	out := new(google_protobuf2.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointService) CreateSomething(ctx context.Context, in *Something, opts ...client.CallOption) (*Something, error) {
	req := c.c.NewRequest(c.name, "IntPointService.CreateSomething", in)
	out := new(Something)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IntPointService service

type IntPointServiceHandler interface {
	// The convention requires the rpc names have Create/Read/Update/List/Delete
	// as a prefix. The type is inferred from the response (except for delete),
	// so multiple objects can have CURDL handlers in the same service, provided
	// they are given unique suffixes
	Create(context.Context, *CreateIntPointRequest, *CreateIntPointResponse) error
	Read(context.Context, *ReadIntPointRequest, *ReadIntPointResponse) error
	Update(context.Context, *UpdateIntPointRequest, *UpdateIntPointResponse) error
	List(context.Context, *ListIntPointRequest, *ListIntPointResponse) error
	ListSomething(context.Context, *google_protobuf2.Empty, *ListSomethingResponse) error
	Delete(context.Context, *DeleteIntPointRequest, *DeleteIntPointResponse) error
	// CustomMethod can't be autogenerated as it matches no conventions, it will
	// become a stub
	CustomMethod(context.Context, *google_protobuf2.Empty, *google_protobuf2.Empty) error
	// CreateSomething also doesn't match conventions and will become a stub
	CreateSomething(context.Context, *Something, *Something) error
}

func RegisterIntPointServiceHandler(s server.Server, hdlr IntPointServiceHandler, opts ...server.HandlerOption) error {
	type intPointService interface {
		Create(ctx context.Context, in *CreateIntPointRequest, out *CreateIntPointResponse) error
		Read(ctx context.Context, in *ReadIntPointRequest, out *ReadIntPointResponse) error
		Update(ctx context.Context, in *UpdateIntPointRequest, out *UpdateIntPointResponse) error
		List(ctx context.Context, in *ListIntPointRequest, out *ListIntPointResponse) error
		ListSomething(ctx context.Context, in *google_protobuf2.Empty, out *ListSomethingResponse) error
		Delete(ctx context.Context, in *DeleteIntPointRequest, out *DeleteIntPointResponse) error
		CustomMethod(ctx context.Context, in *google_protobuf2.Empty, out *google_protobuf2.Empty) error
		CreateSomething(ctx context.Context, in *Something, out *Something) error
	}
	type IntPointService struct {
		intPointService
	}
	h := &intPointServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&IntPointService{h}, opts...))
}

type intPointServiceHandler struct {
	IntPointServiceHandler
}

func (h *intPointServiceHandler) Create(ctx context.Context, in *CreateIntPointRequest, out *CreateIntPointResponse) error {
	return h.IntPointServiceHandler.Create(ctx, in, out)
}

func (h *intPointServiceHandler) Read(ctx context.Context, in *ReadIntPointRequest, out *ReadIntPointResponse) error {
	return h.IntPointServiceHandler.Read(ctx, in, out)
}

func (h *intPointServiceHandler) Update(ctx context.Context, in *UpdateIntPointRequest, out *UpdateIntPointResponse) error {
	return h.IntPointServiceHandler.Update(ctx, in, out)
}

func (h *intPointServiceHandler) List(ctx context.Context, in *ListIntPointRequest, out *ListIntPointResponse) error {
	return h.IntPointServiceHandler.List(ctx, in, out)
}

func (h *intPointServiceHandler) ListSomething(ctx context.Context, in *google_protobuf2.Empty, out *ListSomethingResponse) error {
	return h.IntPointServiceHandler.ListSomething(ctx, in, out)
}

func (h *intPointServiceHandler) Delete(ctx context.Context, in *DeleteIntPointRequest, out *DeleteIntPointResponse) error {
	return h.IntPointServiceHandler.Delete(ctx, in, out)
}

func (h *intPointServiceHandler) CustomMethod(ctx context.Context, in *google_protobuf2.Empty, out *google_protobuf2.Empty) error {
	return h.IntPointServiceHandler.CustomMethod(ctx, in, out)
}

func (h *intPointServiceHandler) CreateSomething(ctx context.Context, in *Something, out *Something) error {
	return h.IntPointServiceHandler.CreateSomething(ctx, in, out)
}

// Client API for IntPointTxn service

type IntPointTxnService interface {
	// The convention requires the rpc names have Create/Read/Update/List/Delete
	// as a prefix. The type is inferred from the response (except for delete),
	// so multiple objects can have CURDL handlers in the same service, provided
	// they are given unique suffixes
	Create(ctx context.Context, in *CreateIntPointRequest, opts ...client.CallOption) (*CreateIntPointResponse, error)
	Read(ctx context.Context, in *ReadIntPointRequest, opts ...client.CallOption) (*ReadIntPointResponse, error)
	Update(ctx context.Context, in *UpdateIntPointRequest, opts ...client.CallOption) (*UpdateIntPointResponse, error)
	List(ctx context.Context, in *ListIntPointRequest, opts ...client.CallOption) (*ListIntPointResponse, error)
	Delete(ctx context.Context, in *DeleteIntPointRequest, opts ...client.CallOption) (*DeleteIntPointResponse, error)
	DeleteSet(ctx context.Context, in *DeleteIntPointsRequest, opts ...client.CallOption) (*DeleteIntPointResponse, error)
	// CustomMethod can't be autogenerated as it matches no conventions, it will
	// become a stub
	CustomMethod(ctx context.Context, in *google_protobuf2.Empty, opts ...client.CallOption) (*google_protobuf2.Empty, error)
	// CreateSomething also doesn't match conventions and will become a stub
	CreateSomething(ctx context.Context, in *Something, opts ...client.CallOption) (*Something, error)
}

type intPointTxnService struct {
	c    client.Client
	name string
}

func NewIntPointTxnService(name string, c client.Client) IntPointTxnService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "example"
	}
	return &intPointTxnService{
		c:    c,
		name: name,
	}
}

func (c *intPointTxnService) Create(ctx context.Context, in *CreateIntPointRequest, opts ...client.CallOption) (*CreateIntPointResponse, error) {
	req := c.c.NewRequest(c.name, "IntPointTxn.Create", in)
	out := new(CreateIntPointResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointTxnService) Read(ctx context.Context, in *ReadIntPointRequest, opts ...client.CallOption) (*ReadIntPointResponse, error) {
	req := c.c.NewRequest(c.name, "IntPointTxn.Read", in)
	out := new(ReadIntPointResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointTxnService) Update(ctx context.Context, in *UpdateIntPointRequest, opts ...client.CallOption) (*UpdateIntPointResponse, error) {
	req := c.c.NewRequest(c.name, "IntPointTxn.Update", in)
	out := new(UpdateIntPointResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointTxnService) List(ctx context.Context, in *ListIntPointRequest, opts ...client.CallOption) (*ListIntPointResponse, error) {
	req := c.c.NewRequest(c.name, "IntPointTxn.List", in)
	out := new(ListIntPointResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointTxnService) Delete(ctx context.Context, in *DeleteIntPointRequest, opts ...client.CallOption) (*DeleteIntPointResponse, error) {
	req := c.c.NewRequest(c.name, "IntPointTxn.Delete", in)
	out := new(DeleteIntPointResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointTxnService) DeleteSet(ctx context.Context, in *DeleteIntPointsRequest, opts ...client.CallOption) (*DeleteIntPointResponse, error) {
	req := c.c.NewRequest(c.name, "IntPointTxn.DeleteSet", in)
	out := new(DeleteIntPointResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointTxnService) CustomMethod(ctx context.Context, in *google_protobuf2.Empty, opts ...client.CallOption) (*google_protobuf2.Empty, error) {
	req := c.c.NewRequest(c.name, "IntPointTxn.CustomMethod", in)
	out := new(google_protobuf2.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointTxnService) CreateSomething(ctx context.Context, in *Something, opts ...client.CallOption) (*Something, error) {
	req := c.c.NewRequest(c.name, "IntPointTxn.CreateSomething", in)
	out := new(Something)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IntPointTxn service

type IntPointTxnHandler interface {
	// The convention requires the rpc names have Create/Read/Update/List/Delete
	// as a prefix. The type is inferred from the response (except for delete),
	// so multiple objects can have CURDL handlers in the same service, provided
	// they are given unique suffixes
	Create(context.Context, *CreateIntPointRequest, *CreateIntPointResponse) error
	Read(context.Context, *ReadIntPointRequest, *ReadIntPointResponse) error
	Update(context.Context, *UpdateIntPointRequest, *UpdateIntPointResponse) error
	List(context.Context, *ListIntPointRequest, *ListIntPointResponse) error
	Delete(context.Context, *DeleteIntPointRequest, *DeleteIntPointResponse) error
	DeleteSet(context.Context, *DeleteIntPointsRequest, *DeleteIntPointResponse) error
	// CustomMethod can't be autogenerated as it matches no conventions, it will
	// become a stub
	CustomMethod(context.Context, *google_protobuf2.Empty, *google_protobuf2.Empty) error
	// CreateSomething also doesn't match conventions and will become a stub
	CreateSomething(context.Context, *Something, *Something) error
}

func RegisterIntPointTxnHandler(s server.Server, hdlr IntPointTxnHandler, opts ...server.HandlerOption) error {
	type intPointTxn interface {
		Create(ctx context.Context, in *CreateIntPointRequest, out *CreateIntPointResponse) error
		Read(ctx context.Context, in *ReadIntPointRequest, out *ReadIntPointResponse) error
		Update(ctx context.Context, in *UpdateIntPointRequest, out *UpdateIntPointResponse) error
		List(ctx context.Context, in *ListIntPointRequest, out *ListIntPointResponse) error
		Delete(ctx context.Context, in *DeleteIntPointRequest, out *DeleteIntPointResponse) error
		DeleteSet(ctx context.Context, in *DeleteIntPointsRequest, out *DeleteIntPointResponse) error
		CustomMethod(ctx context.Context, in *google_protobuf2.Empty, out *google_protobuf2.Empty) error
		CreateSomething(ctx context.Context, in *Something, out *Something) error
	}
	type IntPointTxn struct {
		intPointTxn
	}
	h := &intPointTxnHandler{hdlr}
	return s.Handle(s.NewHandler(&IntPointTxn{h}, opts...))
}

type intPointTxnHandler struct {
	IntPointTxnHandler
}

func (h *intPointTxnHandler) Create(ctx context.Context, in *CreateIntPointRequest, out *CreateIntPointResponse) error {
	return h.IntPointTxnHandler.Create(ctx, in, out)
}

func (h *intPointTxnHandler) Read(ctx context.Context, in *ReadIntPointRequest, out *ReadIntPointResponse) error {
	return h.IntPointTxnHandler.Read(ctx, in, out)
}

func (h *intPointTxnHandler) Update(ctx context.Context, in *UpdateIntPointRequest, out *UpdateIntPointResponse) error {
	return h.IntPointTxnHandler.Update(ctx, in, out)
}

func (h *intPointTxnHandler) List(ctx context.Context, in *ListIntPointRequest, out *ListIntPointResponse) error {
	return h.IntPointTxnHandler.List(ctx, in, out)
}

func (h *intPointTxnHandler) Delete(ctx context.Context, in *DeleteIntPointRequest, out *DeleteIntPointResponse) error {
	return h.IntPointTxnHandler.Delete(ctx, in, out)
}

func (h *intPointTxnHandler) DeleteSet(ctx context.Context, in *DeleteIntPointsRequest, out *DeleteIntPointResponse) error {
	return h.IntPointTxnHandler.DeleteSet(ctx, in, out)
}

func (h *intPointTxnHandler) CustomMethod(ctx context.Context, in *google_protobuf2.Empty, out *google_protobuf2.Empty) error {
	return h.IntPointTxnHandler.CustomMethod(ctx, in, out)
}

func (h *intPointTxnHandler) CreateSomething(ctx context.Context, in *Something, out *Something) error {
	return h.IntPointTxnHandler.CreateSomething(ctx, in, out)
}

// Client API for CircleService service

type CircleService interface {
	List(ctx context.Context, in *ListCircleRequest, opts ...client.CallOption) (*ListCircleResponse, error)
}

type circleService struct {
	c    client.Client
	name string
}

func NewCircleService(name string, c client.Client) CircleService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "example"
	}
	return &circleService{
		c:    c,
		name: name,
	}
}

func (c *circleService) List(ctx context.Context, in *ListCircleRequest, opts ...client.CallOption) (*ListCircleResponse, error) {
	req := c.c.NewRequest(c.name, "CircleService.List", in)
	out := new(ListCircleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CircleService service

type CircleServiceHandler interface {
	List(context.Context, *ListCircleRequest, *ListCircleResponse) error
}

func RegisterCircleServiceHandler(s server.Server, hdlr CircleServiceHandler, opts ...server.HandlerOption) error {
	type circleService interface {
		List(ctx context.Context, in *ListCircleRequest, out *ListCircleResponse) error
	}
	type CircleService struct {
		circleService
	}
	h := &circleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CircleService{h}, opts...))
}

type circleServiceHandler struct {
	CircleServiceHandler
}

func (h *circleServiceHandler) List(ctx context.Context, in *ListCircleRequest, out *ListCircleResponse) error {
	return h.CircleServiceHandler.List(ctx, in, out)
}
