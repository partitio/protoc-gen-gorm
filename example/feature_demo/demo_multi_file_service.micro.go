// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: example/feature_demo/demo_multi_file_service.proto

package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/partitio/protoc-gen-gorm/options"
import _ "github.com/partitio/atlas-app-toolkit/query"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BlogPostService service

type BlogPostService interface {
	Read(ctx context.Context, in *ReadAccountRequest, opts ...client.CallOption) (*ReadBlogPostsResponse, error)
}

type blogPostService struct {
	c    client.Client
	name string
}

func NewBlogPostService(name string, c client.Client) BlogPostService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "example"
	}
	return &blogPostService{
		c:    c,
		name: name,
	}
}

func (c *blogPostService) Read(ctx context.Context, in *ReadAccountRequest, opts ...client.CallOption) (*ReadBlogPostsResponse, error) {
	req := c.c.NewRequest(c.name, "BlogPostService.Read", in)
	out := new(ReadBlogPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlogPostService service

type BlogPostServiceHandler interface {
	Read(context.Context, *ReadAccountRequest, *ReadBlogPostsResponse) error
}

func RegisterBlogPostServiceHandler(s server.Server, hdlr BlogPostServiceHandler, opts ...server.HandlerOption) error {
	type blogPostService interface {
		Read(ctx context.Context, in *ReadAccountRequest, out *ReadBlogPostsResponse) error
	}
	type BlogPostService struct {
		blogPostService
	}
	h := &blogPostServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BlogPostService{h}, opts...))
}

type blogPostServiceHandler struct {
	BlogPostServiceHandler
}

func (h *blogPostServiceHandler) Read(ctx context.Context, in *ReadAccountRequest, out *ReadBlogPostsResponse) error {
	return h.BlogPostServiceHandler.Read(ctx, in, out)
}
